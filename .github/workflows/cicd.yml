name: cicd lol

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERUSER }}
          password: ${{ secrets.DOCKERTOKEN }}

      - name: Set environment variables
        run: |
          VERSION="v1.0.${{ github.run_number }}"
          echo "IMAGE_NAME=${{ secrets.DOCKERUSER }}/clean-flask" >> $GITHUB_ENV
          echo "IMAGE_TAG=0.0.${{ github.run_number }}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest

    needs: build # wait for the build job to complete

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: set environment variables
        run: |
          set -ex
          echo "IMAGE_TAG=0.0.${{ github.run_number }}" >> $GITHUB_ENV
          echo "checking image tag, is: ${{env.IMAGE_TAG}}"

      - name: Modify deploy-k8s.yaml file to use new image tag
        run: |
          sed -i "s|image: crazyguy888/clean-flask:.*|image: crazyguy888/clean-flask:${{env.IMAGE_TAG}}|" deploy-k8s.yaml

      - name: verify sshpass and ssh installed
        run: |
          ssh -V || { echo "ssh is not installed"; exit 1; }
          sshpass -V || { echo "sshpass is not installed"; exit 1; }

      - name: SCP yaml to remote machine using sshpass
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: | 
          set -ex
          sshpass -p $SSH_PASSWORD scp -v -o StrictHostKeyChecking=no ./deploy-k8s.yaml $SSH_USER@$REMOTE_HOST:/home/$SSH_USER

      - name: SSH and apply kubernetes yaml
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: ${{ secrets.SSH_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        run: |
          set -ex
          sshpass -p $SSH_PASSWORD ssh -v -o StrictHostKeyChecking=no $SSH_USER@$REMOTE_HOST "kubectl apply -f /home/$SSH_USER/deploy-k8s.yaml"